ros2 action list -t
ros2 action info <pkg name>
ros2 interface show turtlesim/action/RotateAbsolute

# To utilize our custom interface, we simply import it into our nodes and employ it as if it were a standard interface.
    Python import syntax:
        from ros2_fndm_interface.msg import Student

. install/setup.bash
ros2 interface show ros2_fndm_interface/msg/Student
ros2 interface show ros2_fndm_interface/action/Fibonacci

ros2 pkg create py_actions --build-type ament_python --dependencies rclpy ros2_fndm_interface


test:
    ros2 run py_actions fibonacci_server 
    ros2 action send_goal <action_name> <action msg type> "{ '<goal msg name>' : <value>}"
    ros2 action send_goal fibonacci_action ros2_fndm_interface/action/Fibonacci "{ 'order' : 5}" 
    ros2 run py_actions fibonacci_client --ros-args -p order:=5

    1. bringup sim
    2. ros2 run smallrobot_remote task_server
    3. ~/ros2_ws/src/smallrobot_remote$ ./alex_interface.py
    4. ngrok http 5000
    5. go https://developer.amazon.com/alexa/console/ask/build/custom/amzn1.ask.skill.5ca425f2-b353-40da-9616-c6f013688a23/development/en_US/endpoint
        to update defalut region based on forwarding url.
    6. https://developer.amazon.com/alexa/console/ask/test/amzn1.ask.skill.5ca425f2-b353-40da-9616-c6f013688a23/development/en_US
        'activate roach' to activate robotarm, and say, 'go home' to move robotarm.
    or use cmd line
    ros2 action send_goal /task_server ros2_fndm_interface/action/Alex "task_number: 1"
    