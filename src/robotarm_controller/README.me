1. prerequisite: ros2 launch smallrobot_description gazebo.launch.py 

ros2 launch robotarm_controller controller.launch.py

# to see if ros2_control is loaded.
ros2 node list 

ros2 control list_controllers
ros2 service list | grep controller_manager
ros2 control list_hardware_components 
ros2 param get /arm_controller joints
ros topic list
ros2 topic info /arm_controller/joint_trajectory --verbose
# Check published vs expected joint names

ros2 topic pub /arm_controller/joint_trajectory trajectory_msgs/msg/JointTrajectory "
header:
  stamp:
    sec: 0
    nanosec: 0
  frame_id: ''
joint_names: [joint1, joint2, joint3, joint4, joint5, joint6]
points:
- positions: [1.57, 0.0, 0.0, 0.0, 0.0, 0.0]  # 90 degrees for joint1
  time_from_start: {sec: 1, nanosec: 0}
" 

ros2 topic pub /arm_controller/joint_trajectory trajectory_msgs/msg/JointTrajectory '
{
  joint_names: ["joint1", "joint2", "joint3", 'joint4','joint5','joint6'],
  points: [
    {
      positions: [2.5, -0.2, 1.57, -1.0, 1.3, 1.0],
      time_from_start: {sec: 2, nanosec: 0}
    },
    {
      positions: [0.0, 0.0, 0.0, 0.0, 2.0, 0.0],
      time_from_start: {sec: 4, nanosec: 0}
    }
  ]
}'

ros2 action send_goal /arm_controller/follow_joint_trajectory control_msgs/action/FollowJointTrajectory "
{
  trajectory: {
    joint_names: ['joint1', 'joint2', 'joint3', 'joint4', 'joint5', 'joint6'],
    points: [{
      positions: [0.5, 0.5, 0.5, 0.5, 0.5, 0.5],
      time_from_start: {sec: 2}
    }]
  }
}
"

troubleshooting:
  control manage not loaded
    Check your CMakeLists.txt â†’ correct plugin export.
    Check your robotarm_controller_plugins.xml â†’ correct path, type. match with hw interface class
    Check your robotarm_controllers.yaml â†’ correct controller types, joints, command/state interfaces.
    Check your URDF/XACRO â†’ correct transmissions and hardwareInterface tags.

    JointTrajectoryController  unconfigured

âœ… joint_state_broadcaster is active â€” good.

âœ… arm_controller is loaded â€” but it's still unconfigured!

ðŸ”´ So the spawner crashed because it couldn't configure the arm_controller successfully.
Remember: the lifecycle of a controller goes:

    unconfigured

    inactive

    active

If it's stuck at unconfigured, it usually means:

    Bad parameters (missing joints, interfaces, etc.)

    Controller type mismatch

    Hardware interfaces not matching

  Your RobotArmInterface is not correctly exporting command_interfaces!

ROS 2 controllers (like JointTrajectoryController) require position commands to be available.