1. prerequisite: ros2 launch smallrobot_description gazebo.launch.py 
  ros2 pkg list | grep gz_ros2_control
  
ros2 launch robotarm_controller controller.launch.py

# to see if ros2_control is loaded.
ros2 node list 

ros2 control list_controllers -v
ros2 service list | grep controller_manager
ros2 control list_hardware_components 
ros2 param get /arm_controller joints

troubleshooting:
  control manage not loaded
    Check your CMakeLists.txt â†’ correct plugin export.
    Check your robotarm_controller_plugins.xml â†’ correct path, type. match with hw interface class
    Check your robotarm_controllers.yaml â†’ correct controller types, joints, command/state interfaces.
    Check your URDF/XACRO â†’ correct transmissions and hardwareInterface tags.

    JointTrajectoryController  unconfigured

âœ… joint_state_broadcaster is active â€” good.

âœ… arm_controller is loaded â€” but it's still unconfigured!

ðŸ”´ So the spawner crashed because it couldn't configure the arm_controller successfully.
Remember: the lifecycle of a controller goes:

    unconfigured

    inactive

    active

If it's stuck at unconfigured, it usually means:

    Bad parameters (missing joints, interfaces, etc.)

    Controller type mismatch

    Hardware interfaces not matching

  Your RobotArmInterface is not correctly exporting command_interfaces!

ROS 2 controllers (like JointTrajectoryController) require position commands to be available.

control:
  ros topic list
  ros2 topic info /arm_controller/joint_trajectory --verbose
  # Check published vs expected joint names

  ros2 topic pub --once /arm_controller/joint_trajectory trajectory_msgs/msg/JointTrajectory "{joint_names: ['link1_to_link2', 'link2_to_link3', 'link3_to_link4', 'link4_to_link5', 'link5_to_link6', 'link6_to_link6flange'], points: [{positions: [-1.345, -1.23, 0.264, -0.296, 0.389, -1.5], time_from_start: {sec: 5, nanosec: 0}}]}"

  ros2 topic pub /grip_controller/joint_trajectory trajectory_msgs/msg/JointTrajectory "{joint_names: ['gripper_controller'], points: [{positions: [-0.70], time_from_start: {sec: 5} } ]}" --once

  ros2 action send_goal /arm_controller/follow_joint_trajectory control_msgs/action/FollowJointTrajectory "
  {
    trajectory: {
      joint_names: ['joint1', 'joint2', 'joint3', 'joint4', 'joint5', 'joint6'],
      points: [{
        positions: [0.5, 0.5, 0.5, 0.5, 0.5, 0.5],
        time_from_start: {sec: 2}
      }]
    }
  }
  "

  # To open the gripper (e.g., max position)
  ros2 action send_goal /gripper_controller/gripper_cmd control_msgs/action/GripperCommand "{command: {position: 0.019, max_effort: 0.0}}"

  # To close the gripper (e.g., min position)
  ros2 action send_goal /gripper_controller/gripper_cmd control_msgs/action/GripperCommand "{command: {position: -0.010, max_effort: 0.0}}"
